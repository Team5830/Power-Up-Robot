This file is DEPRECATED. All relevant data has been moved into Projects on GitHub.





~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~






  _____    ___    ____     ___  
 |_   _|  / _ \  |  _ \   / _ \ 
   | |   | | | | | | | | | | | |
   | |   | |_| | | |_| | | |_| |
   |_|    \___/  |____/   \___/ 
                                                     
*Make command that lines up the robot for portal, raises elevator to portal height while leaving winch down 
*Make intake override button in Shuffleboard and map to SmartDashbaord "Override Intake Sensor" network table entry
*Make a manual elevator override button. Requires reworking the CommandGroups

TEST:
*Elevator-encoder-based balance protection. Ensure speed reduction and correct initiation height
*SmartDashboard Gyro Reset button
*Tune Gyro Rotation PID loop for maximum speed and accuracy. Increase output range if necessary
*Ramp-down time in LIDAR -> Drive PID
*Autonomous modes. Ensure values are processed correctly in MotionProfiling
*Proper joystick mapping via SmartDashboard chooser (under teleopInit and teleopPeriodic)
*Tune WheelPID and maybe LIDAR PID if that is still used for some reason
*Custom contoller layouts. Make sure buttons get initiated and flightsticks are automatically selected should SmartDashboard return (null)

OPTIONAL:
*Make Auto more efficient by raising elevator before robot completely stops, using "if setpoint - position < 20" or something
*Move swerve drive motor references to RobotMap, they are scattered around, but work fine
*Make joystick toggle button between robot and field oriented drive.  Avoid clashing with SmartDashboard (SHELVED: Large Shuffleboard button works just fine)
*Do some crazy mathematical black magic to have MotionProfiling make the robot strafe rather than rotate then move forward
*Implement GRIP vision processing and relay X/Y values back to code via network tables and display on Shuffleboard 
*Research ramping PID setpoints for smooth elevator/LIDAR PID starts, implement and test self-made ramp code in Sponteneous Notes

----------------------------------------------------------------------------------------------------
   ____   _                                      _                 
  / ___| | |__     __ _   _ __     __ _    ___  | |   ___     __ _ 
 | |     | '_ \   / _` | | '_ \   / _` |  / _ \ | |  / _ \   / _` |
 | |___  | | | | | (_| | | | | | | (_| | |  __/ | | | (_) | | (_| |
  \____| |_| |_|  \__,_| |_| |_|  \__, |  \___| |_|  \___/   \__, |
                                  |___/                      |___/

2018/08/18 (Hunter P.): Added auto winch up when cube is in the manipulator
2018/08/16 (Hunter P.): Added variables for max elevator speed up/down
2018/08/16 (Hunter P.): Added SmartDashboard boolean toggle to override LIDAR distance check when suck/spit cube is run. Just in case LIDAR fails or is bent in some way.
2018/08/16 (Hunter P.): Added LIDAR distance check to SuckCube and TeleopSpitCube so the cube cannot be sucked if it's already there and vice versa. Made system variable for that magic distance number
2018/08/16 (Hunter P.): Fixed bug where intake wheels would only move for one tick (changed whileHeld to repeated "if" with button.get as boolean)
2018/07/28 (Hunter P.): Added SmartDashboard "Autonomous Path Chosen" putString commands in each AutoMove command
2018/07/28 (Hunter P.): Added SmartDashboard "Status" putString commands in each command
2018/07/28 (Hunter P.): Consolidated all AutoLogic commands into one with cascading case switches for each scenario, kept old in case reverting back is required
2018/07/28 (Hunter P.): Added 45째 and -45째 jumps to POV/D-pad presets
2018/07/27 (Hunter P.): Realized that there is already a .getPOV in Joystick library, changed to that and replaced if series with case switch
2018/07/27 (Hunter P.): Added angle jump-to commands via DriveMotionProfiling and mapped them to POV/D-pad, depending on controller selected.
2018/07/26 (Hunter P.): Added PID prefix to all subsystems that used PID for easier sorting
2018/07/26 (Hunter P.): Renamed Auto... files to AutoMove... and MAINAuto... to AutoLogic... for easier understandability & sorting
2018/07/26 (Hunter P.): Purged code of all old, temporary, unnecessary files/lines.
2018/07/25 (Hunter P.): Added SwerveDrive.java to subsystems by placing "extends Subsystem" in class to ensure command compatibility
2018/07/25 (Hunter P.): Changed control input selection from if/else to case switch, added custom layouts for Daniel, Hannah, and Hunter
2018/07/25 (Hunter P.): Moved controller initiation to separate command to keep Robot.java tidy
2018/07/25 (Hunter P.): Changed isFlightsticks chooser from boolean to integers, relabeled to controlType
2018/07/25 (Hunter P.): Added gyro clamped range from 0 to 360 in Gyro subsystem, renamed them and changed references as necessary
2018/07/25 (Hunter P.): Created prototype layout in ShuffleBoard and wrote necessary SmartDashboard post commands in code
2018/07/24 (Hunter P.): Created separate MAIN auto logic commands and SmartDashboard chooser for testing new auto methods
2018/07/24 (Hunter P.): Converted all autonomous modes to MotionProfiling steps, with the Java filename prefix TEST
2018/07/24 (Hunter P.): Forced autonomous into robot-oriented drive and disabled SmartDashboard driveType chooser until teleop
2018/07/24 (Hunter P.): Added SmartDashboard chooser to select between dual flightsticks and single Xbox joystick 
2018/07/24 (Hunter P.): Added a Gyro subsystem which clamps the gyro angle to a value between -180째 and 180째, Gyro rotate PID now uses it
2018/07/23 (Hunter P.): Created test motion profiling-based auto command groups for testing on the robot
2018/07/23 (Hunter P.): Made motion profiling code for automatic angle/distance setpoint processing
2018/07/22 (Hunter P.): Lowered P value and removed D value in LIDAR -> Drive PID
2018/07/22 (Hunter P.): Re-enabled gyro correction in DriveToSwitch/Scale commands, adjusted PID and output range values
2018/07/22 (Hunter P.): Added SmartDashboard Gyro Reset button
2018/07/22 (Hunter P.): Converted balance protection code from limit switches to an elevator encoder distance value
2018/07/22 (Hunter P.): Added changeable variables for LIDAR distances in Robot.java and referred auto code to them
2018/01/06 - 2018/03/02 (Hunter P., Max P.): Suffered immense mental trauma trying to get swerve to work.

----------------------------------------------------------------------------------------------------

OTHER INFO:

Vision processing:
Workflow: USB Camera > RoboRIO USB Port > CameraServer MJPEG stream > Network > Driver Laptop > 
GRIP Conversion from Camera Stream to X/Y Values > Network Table > Network > RoboRIO > Network Table Receive code > 
Data analysis and Execution code
Network Tables Code: https://www.reddit.com/r/FRC/comments/5q82ph/network_tables_java/
GRIP Input = IP camera at http://roborio-5830-frc.local:1181/?action=stream

Motion Profiling:
Requirements: At least one encoder on one drive wheel to calculate distance, or all 4 and calculate average?
Workflow: Plot points on game field map, connect dots and calculate polar coordinates from each dot to next.
Make commands corresponding to each direction and distance.
Make command group for entire auto sequence.
EXAMPLE:
Objective: Robot needs to go forward for 2 feet, then right 35 inches.
Steps:
Calculate angles and distance requirements: 24" at 0 deg, then 35" at 90 deg
Set encoder distance per pulse so that every distance unit is 1"
Set commands: 1. Forward until encoder at origin + 24", 2. Robot rotate 90 deg when setpoint reached, 3. Forward until encoder at origin + 36"

Spontaneous notes:

Is this single-use, acceleration-only ramp code?
boolean isEnabled;
if (isEnabled = true){
	if (input = 0){output = 0}
	else if(output < input){output = Math.abs(output + <small number>)}
	else if(output = input){
		output = input;
		isEnabled = false
		}
	}
else{output = input}